#!/usr/bin/ruby

class PluginManager
"""
The Plugin Manager maintains the registry of available
plugins and the availability in the application.
"""
    attr_accessor :registry
    #~ attr_reader :registry

    def initialize()
        @registry = {}
    end

    def register(plugin_name, plugin, active)
        puts "Registered plugin #{plugin_name} Active:#{active}"
        @registry
    end

    def unregister(plugin_name)
        puts "Unregistered plugin #{plugin_name}"
        @registry
    end

    def activate(plugin_name)
        if @registry.key?(plugin_name)
            puts "ACTIVATE PLUGIN"
            raise
        else
            puts "Unknown plugin named '#{plugin_name}'"
        end
    end

    def deactivate(plugin_name)
        if @registry.key?(plugin_name)
            puts "DEACTIVATE PLUGIN"
            raise
        else
            puts "Unknown plugin named '#{plugin_name}'"
        end
    end
end

class Plugin
    attr_accessor :active

    def initialize(kwargs={})
        @kwargs = { active => true }.merge(kwargs)
    end

    def report
        puts "Plugin base"
    end
end


puts "Start plug-in app"

puts "Read core plugins"
s=""
File.open("core_plugin.rb", "r").each { |line| s += line }

puts "Read extension plugins"
plugin_manager = PluginManager.new
eval(s)

plugin_manager.activate("myPluginTest")
p=Test.new
p.report
